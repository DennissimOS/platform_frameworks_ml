// DO NOT EDIT;
// Generated by ml/nn/runtime/test/specs/generate_vts_test.sh

namespace batch_to_space {
std::vector<MixedTypedExample> examples = {
// Generated batch_to_space test
#include "examples/batch_to_space.example.cpp"
};
// Generated model constructor
#include "vts_models/batch_to_space.model.cpp"
} // namespace batch_to_space
TEST_F(NeuralnetworksHidlTest, batch_to_space) {
    generated_tests::Execute(device,
                             batch_to_space::createTestModel,
                             batch_to_space::is_ignored,
                             batch_to_space::examples);
}

namespace div {
std::vector<MixedTypedExample> examples = {
// Generated div test
#include "examples/div.example.cpp"
};
// Generated model constructor
#include "vts_models/div.model.cpp"
} // namespace div
TEST_F(NeuralnetworksHidlTest, div) {
    generated_tests::Execute(device,
                             div::createTestModel,
                             div::is_ignored,
                             div::examples);
}

namespace mean {
std::vector<MixedTypedExample> examples = {
// Generated mean test
#include "examples/mean.example.cpp"
};
// Generated model constructor
#include "vts_models/mean.model.cpp"
} // namespace mean
TEST_F(NeuralnetworksHidlTest, mean) {
    generated_tests::Execute(device,
                             mean::createTestModel,
                             mean::is_ignored,
                             mean::examples);
}

namespace pad {
std::vector<MixedTypedExample> examples = {
// Generated pad test
#include "examples/pad.example.cpp"
};
// Generated model constructor
#include "vts_models/pad.model.cpp"
} // namespace pad
TEST_F(NeuralnetworksHidlTest, pad) {
    generated_tests::Execute(device,
                             pad::createTestModel,
                             pad::is_ignored,
                             pad::examples);
}

namespace space_to_batch {
std::vector<MixedTypedExample> examples = {
// Generated space_to_batch test
#include "examples/space_to_batch.example.cpp"
};
// Generated model constructor
#include "vts_models/space_to_batch.model.cpp"
} // namespace space_to_batch
TEST_F(NeuralnetworksHidlTest, space_to_batch) {
    generated_tests::Execute(device,
                             space_to_batch::createTestModel,
                             space_to_batch::is_ignored,
                             space_to_batch::examples);
}

namespace squeeze {
std::vector<MixedTypedExample> examples = {
// Generated squeeze test
#include "examples/squeeze.example.cpp"
};
// Generated model constructor
#include "vts_models/squeeze.model.cpp"
} // namespace squeeze
TEST_F(NeuralnetworksHidlTest, squeeze) {
    generated_tests::Execute(device,
                             squeeze::createTestModel,
                             squeeze::is_ignored,
                             squeeze::examples);
}

namespace strided_slice {
std::vector<MixedTypedExample> examples = {
// Generated strided_slice test
#include "examples/strided_slice.example.cpp"
};
// Generated model constructor
#include "vts_models/strided_slice.model.cpp"
} // namespace strided_slice
TEST_F(NeuralnetworksHidlTest, strided_slice) {
    generated_tests::Execute(device,
                             strided_slice::createTestModel,
                             strided_slice::is_ignored,
                             strided_slice::examples);
}

namespace sub {
std::vector<MixedTypedExample> examples = {
// Generated sub test
#include "examples/sub.example.cpp"
};
// Generated model constructor
#include "vts_models/sub.model.cpp"
} // namespace sub
TEST_F(NeuralnetworksHidlTest, sub) {
    generated_tests::Execute(device,
                             sub::createTestModel,
                             sub::is_ignored,
                             sub::examples);
}

namespace transpose {
std::vector<MixedTypedExample> examples = {
// Generated transpose test
#include "examples/transpose.example.cpp"
};
// Generated model constructor
#include "vts_models/transpose.model.cpp"
} // namespace transpose
TEST_F(NeuralnetworksHidlTest, transpose) {
    generated_tests::Execute(device,
                             transpose::createTestModel,
                             transpose::is_ignored,
                             transpose::examples);
}
